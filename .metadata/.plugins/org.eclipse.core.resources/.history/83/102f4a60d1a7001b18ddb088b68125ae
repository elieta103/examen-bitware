package com.elhg.bitware.spring.data.mongodb.dto;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.elhg.bitware.spring.data.mongodb.model.Cliente;
import com.elhg.bitware.spring.data.mongodb.repository.ClienteRepository;

@CrossOrigin(origins = "http://localhost:8081")
@RestController
@RequestMapping("/api")
public class ClienteController {

  @Autowired
  ClienteRepository clienteRepository;

  @GetMapping("/clientes")
  public ResponseEntity<List<Cliente>> getAllClientes() {
    try {
      List<Cliente> listClientes = new ArrayList<Cliente>();
      listClientes = clienteRepository.findAll();

      if (listClientes.isEmpty()) {
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
      }

      return new ResponseEntity<>(listClientes, HttpStatus.OK);
    } catch (Exception e) {
      e.printStackTrace();
      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @GetMapping("/cliente/{id}")
  public ResponseEntity<Cliente> getClienteById(@PathVariable("id") Integer id) {
    Optional<Cliente> cliente = clienteRepository.findByClienteId(id);

	    if (cliente.isPresent()) {
	      return new ResponseEntity<>(cliente.get(), HttpStatus.OK);
	    } else {
	      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	    }
  }

  @PostMapping("/cliente")
  public ResponseEntity<Cliente> createCliente(@RequestBody Cliente cliente) {
    try {
      Cliente _cliente = clienteRepository.save(cliente);
      return new ResponseEntity<>(_cliente, HttpStatus.CREATED);
    } catch (Exception e) {
    	e.printStackTrace();
      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
  
  

  @PutMapping("/cliente/{id}")
  public ResponseEntity<Cliente> updateCliente(@PathVariable("id") Integer id, @RequestBody Cliente cliente) {
    Optional<Cliente> clienteData = clienteRepository.findById(id);

    if (clienteData.isPresent()) {
      Cliente _cliente = clienteData.get();
      _cliente.setApellidos(cliente.getApellidos());
      _cliente.setContrasenia(cliente.getContrasenia());
      _cliente.setCorreoElectronico(cliente.getCorreoElectronico());
      _cliente.setEdad(cliente.getEdad());
      _cliente.setEstatura(cliente.getEstatura());
      _cliente.setEta(cliente.getEta());
      _cliente.setGeb(cliente.getGeb());
      _cliente.setImc(cliente.getImc());
      _cliente.setNombre(cliente.getNombre());
      _cliente.setNombreUsuario(cliente.getNombreUsuario());
      _cliente.setPeso(cliente.getPeso());
      return new ResponseEntity<>(clienteRepository.save(_cliente), HttpStatus.OK);
    } else {
      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
  }

  
  @DeleteMapping("/cliente/{id}")
  public ResponseEntity<HttpStatus> deleteTutorial(@PathVariable("id") Integer id) {
    try {
      clienteRepository.deleteById(id);
      return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }



}
